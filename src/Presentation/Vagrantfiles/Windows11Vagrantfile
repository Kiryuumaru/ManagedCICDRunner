Vagrant.configure("2") do |config|
  config.vm.box = "gusztavvargadr/windows-11"
  config.vm.communicator = "winrm"
  config.vm.synced_folder ".", "C:\\vagrant", disabled: true
  config.vm.network "public_network", bridge: "Default Switch"
  config.vm.provider "hyperv" do |hv|
    hv.enable_virtualization_extensions = true
  end
  config.vm.provision "shell", inline: <<-SHELL

    # Install git
    $GIT_VERSION = "2.45.2"
    Invoke-WebRequest "https://github.com/git-for-windows/git/releases/download/v${GIT_VERSION}.windows.1/MinGit-${GIT_VERSION}-64-bit.zip" -OutFile "${env:TEMP}\\mingit.zip" -UseBasicParsing;
    $GIT_SHA256 = '7ed2a3ce5bbbf8eea976488de5416894ca3e6a0347cee195a7d768ac146d5290';
    if ((Get-FileHash "${env:TEMP}\\mingit.zip" -Algorithm sha256).Hash -ne $GIT_SHA256) {
      Write-Host 'GIT_SHA256 CHECKSUM VERIFICATION FAILED!';
      exit 1;
    };
    Expand-Archive "${env:TEMP}\\mingit.zip" -DestinationPath c:\\mingit -Force;
    $env:PATH = $env:PATH + ";C:\\mingit\\cmd\\;C:\\mingit\\cmd";
    Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\' -Name Path -Value $env:PATH
    
    # Install gh-cli
    $GH_VERSION = "2.54.0"
    Invoke-WebRequest "https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_windows_amd64.zip" -OutFile "${env:TEMP}\\gh-cli.zip" -UseBasicParsing;
    $GH_SHA256 = 'd3400b7e5c5a7f3912e8da606a2daf3376981d49f0ba0dea0337725eae25351d';
    if ((Get-FileHash "${env:TEMP}\\gh-cli.zip" -Algorithm sha256).Hash -ne $GH_SHA256) {
      Write-Host 'GH_SHA256 CHECKSUM VERIFICATION FAILED!';
      exit 1;
    };
    Expand-Archive "${env:TEMP}\\gh-cli.zip" -DestinationPath c:\\gh-cli -Force;
    $env:PATH = $env:PATH + ";C:\\gh-cli\\bin\\;C:\\gh-cli\\bin";
    Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\' -Name Path -Value $env:PATH
    
    # Install docker
    $DOCKER_VERSION = "27.1.1"
    Enable-WindowsOptionalFeature -Online -FeatureName $("Microsoft-Hyper-V", "Containers", "VirtualMachinePlatform") -All -NoRestart
    Invoke-WebRequest "https://download.docker.com/win/static/stable/x86_64/docker-${DOCKER_VERSION}.zip" -OutFile "${env:TEMP}\\docker-static.zip" -UseBasicParsing;
    $DOCKER_SHA256 = '978d3ba0f8440173469580f9c17f44fe28fcef3a59ab87c32d42a2d9a2853c26';
    if ((Get-FileHash "${env:TEMP}\\docker-static.zip" -Algorithm sha256).Hash -ne $DOCKER_SHA256) {
      Write-Host 'DOCKER_SHA256 CHECKSUM VERIFICATION FAILED!';
      exit 1;
    };
    Expand-Archive "${env:TEMP}\\docker-static.zip" -DestinationPath "${env:TEMP}\\docker-static" -Force;
    xcopy "${env:TEMP}\\docker-static\\docker" "C:\\docker" /h /i /c /k /e /r /y
    $DOCKER_DATA_PATH = "$($env:ProgramData)\\docker"
    $DOCKER_CONFIG_PATH = Join-Path $DOCKER_DATA_PATH "config"
    [System.IO.Directory]::CreateDirectory($DOCKER_CONFIG_PATH)
    $DOCKER_DAEMON_SETTINGS = New-Object PSObject
    $DOCKER_DAEMON_SETTINGS | Add-Member NoteProperty hosts @("npipe://")
    $DOCKER_DAEMON_SETTINGS | ConvertTo-Json | Out-File -FilePath (Join-Path $DOCKER_CONFIG_PATH "daemon.json") -Encoding ASCII
    & "C:\\docker\\dockerd.exe" --register-service --service-name docker
    $env:PATH = $env:PATH + ";C:\\docker\\;C:\\docker";
    Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\' -Name Path -Value $env:PATH
    
    # Install az-cli
    $AZCLI_VERSION = 2.51.0
    Invoke-WebRequest "https://azcliprod.blob.core.windows.net/msi/azure-cli-${AZCLI_VERSION}-x64.msi" -OutFile "${env:TEMP}\\az-cli.msi" -UseBasicParsing;
    $AZCLI_SHA256 = 'ded0e2fbbae52016239c899e7334785726be0e48671c018ee918fca8f62c1ea5';
    if ((Get-FileHash "${env:TEMP}\\az-cli.msi" -Algorithm sha256).Hash -ne $AZCLI_SHA256) {
      Write-Host 'AZCLI_SHA256 CHECKSUM VERIFICATION FAILED!';
      exit 1;
    };
    Start-Process msiexec.exe -NoNewWindow -Wait -ArgumentList '/i', "${env:TEMP}\\az-cli.msi", '/quiet', '/norestart'
    
    # Install Visual Studio
    Invoke-WebRequest "https://aka.ms/vs/17/release/vs_community.exe" -OutFile "${env:TEMP}\\vs_community.exe" -UseBasicParsing;
    & "${env:TEMP}\\vs_community.exe" --quiet --wait --norestart --noUpdateInstaller --includeRecommended `
      --add Microsoft.VisualStudio.Workload.Azure `
      --add Microsoft.VisualStudio.Workload.Data `
      --add Microsoft.VisualStudio.Workload.DataScience `
      --add Microsoft.VisualStudio.Workload.ManagedDesktop `
      --add Microsoft.VisualStudio.Workload.NativeCrossPlat `
      --add Microsoft.VisualStudio.Workload.NativeDesktop `
      --add Microsoft.VisualStudio.Workload.NativeMobile `
      --add Microsoft.VisualStudio.Workload.NetCrossPlat `
      --add Microsoft.VisualStudio.Workload.NetWeb `
      --add Microsoft.VisualStudio.Workload.Node `
      --add Microsoft.VisualStudio.Workload.Python `
      --add Microsoft.VisualStudio.Workload.Universal `
      --add Microsoft.VisualStudio.Workload.VisualStudioExtension `
      | Out-Default

  SHELL
end
